"""
This type stub file was generated by pyright.
"""

from os import environ

from kivy.event import EventDispatcher

"""
Metrics
=======

.. versionadded:: 1.5.0

A screen is defined by its physical size, density and resolution. These
factors are essential for creating UI's with correct size everywhere.

In Kivy, all the graphics pipelines work with pixels. But using pixels as a
measurement unit is problematic because sizes change according to the
screen.

Dimensions
----------

If you want to design your UI for different screen sizes, you will want better
measurement units to work with. Kivy provides some more scalable alternatives.

:Units:
    `pt`
        Points - 1/72 of an inch based on the physical size of the screen.
        Prefer to use sp instead of pt.
    `mm`
        Millimeters - Based on the physical size of the screen.
    `cm`
        Centimeters - Based on the physical size of the screen.
    `in`
        Inches - Based on the physical size of the screen.
    `dp`
        Density-independent Pixels - An abstract unit that is based on the
        physical density of the screen. With a :attr:`~MetricsBase.density` of
        1, 1dp is equal to 1px. When running on a higher density screen, the
        number of pixels used to draw 1dp is scaled up a factor appropriate to
        the screen's dpi, and the inverse for a lower dpi.
        The ratio of dp-to-pixels will change with the screen density, but not
        necessarily in direct proportion. Using the dp unit is a simple
        solution to making the view dimensions in your layout resize
        properly for different screen densities. In others words, it
        provides consistency for the real-world size of your UI across
        different devices.
    `sp`
        Scale-independent Pixels - This is like the dp unit, but it is also
        scaled by the user's font size preference. We recommend you use this
        unit when specifying font sizes, so the font size will be adjusted to
        both the screen density and the user's preference.

Examples
--------

Here is an example of creating a label with a sp font_size and setting the
height manually with a 10dp margin::

    #:kivy 1.5.0
    <MyWidget>:
        Label:
            text: 'Hello world'
            font_size: '15sp'
            size_hint_y: None
            height: self.texture_size[1] + dp(10)

Manual control of metrics
-------------------------

The metrics cannot be changed at runtime. Once a value has been converted to
pixels, you can't retrieve the original value anymore. This stems from the fact
that the DPI and density of a device cannot be changed at runtime.

We provide some environment variables to control metrics:

- `KIVY_METRICS_DENSITY`: if set, this value will be used for
  :attr:`~MetricsBase.density` instead of the systems one. On android,
  the value varies between 0.75, 1, 1.5 and 2.

- `KIVY_METRICS_FONTSCALE`: if set, this value will be used for
  :attr:`~MetricsBase.fontscale` instead of the systems one. On android, the
  value varies between 0.8 and 1.2.

- `KIVY_DPI`: if set, this value will be used for :attr:`~MetricsBase.dpi`.
  Please
  note that setting the DPI will not impact the dp/sp notation because these
  are based on the screen density.

For example, if you want to simulate a high-density screen (like the HTC One
X)::

    KIVY_DPI=320 KIVY_METRICS_DENSITY=2 python main.py --size 1280x720

Or a medium-density (like Motorola Droid 2)::

    KIVY_DPI=240 KIVY_METRICS_DENSITY=1.5 python main.py --size 854x480

You can also simulate an alternative user preference for fontscale as follows::

    KIVY_METRICS_FONTSCALE=1.2 python main.py

"""
__all__ = (
    "Metrics",
    "MetricsBase",
    "pt",
    "inch",
    "cm",
    "mm",
    "dp",
    "sp",
    "dpi2px",
    "NUMERIC_FORMATS",
)
_default_dpi = ...
_default_density = ...
_default_fontscale = ...
if environ.get("KIVY_DOC_INCLUDE", None) == "1":
    _default_dpi = ...
    _default_density = ...
else:
    _custom_dpi = ...
    _custom_density = ...
    _custom_fontscale = ...

def pt(value) -> float:
    """Convert from points to pixels"""
    ...

def inch(value) -> float:
    """Convert from inches to pixels"""
    ...

def cm(value) -> float:
    """Convert from centimeters to pixels"""
    ...

def mm(value) -> float:
    """Convert from millimeters to pixels"""
    ...

def dp(value) -> float:
    """Convert from density-independent pixels to pixels"""
    ...

def sp(value) -> float:
    """Convert from scale-independent pixels to pixels"""
    ...

class MetricsBase(EventDispatcher):
    """Class that contains the default attributes for Metrics. Don't use this
    class directly, but use the `Metrics` instance.
    """

    _dpi = ...
    _density = ...
    _fontscale = ...
    def __init__(self, **kwargs) -> None: ...
    def get_dpi(self, force_recompute=...): ...
    def set_dpi(self, value): ...

    dpi: float = ...
    def get_dpi_rounded(self): ...

    dpi_rounded: int = ...
    def get_density(self, force_recompute=...): ...
    def set_density(self, value): ...

    density: float = ...
    def get_fontscale(self, force_recompute=...): ...
    def set_fontscale(self, value): ...

    fontscale: float = ...
    def get_in(self): ...

    inch: float = ...
    def get_dp(self): ...

    dp: float = ...
    def get_sp(self): ...

    sp: float = ...
    def get_pt(self): ...

    pt: float = ...
    def get_cm(self): ...

    cm: float = ...
    def get_mm(self): ...

    mm: float = ...
    def reset_metrics(self):  # -> None:
        """Resets the dpi/density/fontscale to the platform values, overwriting
        any manually set values.
        """
        ...
    def reset_dpi(self, *args):  # -> None:
        """Resets the dpi (and possibly density) to the platform values,
        overwriting any manually set values.
        """
        ...

Metrics: MetricsBase = ...
