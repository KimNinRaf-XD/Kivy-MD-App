"""
This type stub file was generated by pyright.
"""

from typing import Union
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.floatlayout import FloatLayout
from kivymd.theming import ThemableBehavior
from kivymd.uix.behaviors import CommonElevationBehavior, DeclarativeBehavior, RotateBehavior, ScaleBehavior, SpecificBackgroundColorBehavior
from kivymd.uix.button import MDFloatingActionButton, MDIconButton
from kivymd.uix.controllers import WindowController
from kivymd.uix.list import OneLineIconListItem
from kivymd.uix.menu import MDDropdownMenu
from kivymd.uix.tooltip import MDTooltip

"""
Components/Toolbar
==================

.. seealso::

    `Material Design spec, App bars: top <https://material.io/components/app-bars-top>`_

    `Material Design spec, App bars: bottom <https://material.io/components/app-bars-bottom/app-bars-bottom.html>`_

    `Material Design 3 spec, App bars: top <https://m3.material.io/components/top-app-bar/overview>`_

    `Material Design 3 spec, App bars: bottom <https://m3.material.io/components/bottom-app-bar/overview>`_

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/app-bar-top.png
    :align: center

`KivyMD` provides the following bar positions for use:

- TopAppBar_
- BottomAppBar_

.. TopAppBar_:
TopAppBar
---------

.. code-block:: python

    from kivy.lang import Builder

    from kivymd.app import MDApp

    KV = '''
    MDBoxLayout:
        orientation: "vertical"
        md_bg_color: "#1E1E15"

        MDTopAppBar:
            title: "MDTopAppBar"

        MDLabel:
            text: "Content"
            halign: "center"
    '''


    class Example(MDApp):
        def build(self):
            self.theme_cls.theme_style = "Dark"
            self.theme_cls.primary_palette = "Orange"
            return Builder.load_string(KV)


    Example().run()

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/toolbar-1.png
    :align: center

Add left menu
-------------

.. code-block:: kv

    MDTopAppBar:
        title: "MDTopAppBar"
        anchor_title: "left"
        left_action_items: [["menu", lambda x: app.callback()]]

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/toolbar-2.png
    :align: center

.. note::

    The callback is optional. ``left_action_items: [["menu"]]`` would also work for a button that does nothing.

Add right menu
--------------

.. code-block:: kv

    MDTopAppBar:
        title: "MDTopAppBar"
        anchor_title: "left"
        right_action_items: [["dots-vertical", lambda x: app.callback()]]

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/toolbar-3.png
    :align: center

Add two item to the right menu
------------------------------

.. code-block:: kv

    MDTopAppBar:
        title: "MDTopAppBar"
        anchor_title: "left"
        right_action_items:
            [
            ["dots-vertical", lambda x: app.callback_1()],
            ["clock", lambda x: app.callback_2()]
            ]

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/toolbar-4.png
    :align: center

Change bar color
----------------

.. code-block:: kv

    MDTopAppBar:
        title: "MDTopAppBar"
        anchor_title: "left"
        md_bg_color: "brown"

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/toolbar-5.png
    :align: center

Change bar text color
---------------------

.. code-block:: kv

    MDTopAppBar:
        title: "MDTopAppBar"
        anchor_title: "left"
        specific_text_color: "white"

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/toolbar-6.png
    :align: center

Shadow elevation control
------------------------

.. code-block:: kv

    MDTopAppBar:
        title: "Elevation 4"
        anchor_title: "left"
        elevation: 4
        shadow_color: "brown"

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/toolbar-7.png
    :align: center

.. BottomAppBar:
BottomAppBar
------------

M2 style bottom app bar
-----------------------

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/app-bar-bottom.png
    :align: center

Usage
-----

.. code-block:: python

    from kivy.lang import Builder

    from kivymd.app import MDApp

    KV = '''
    MDBoxLayout:
        md_bg_color: "#1E1E15"

        # Will always be at the bottom of the screen.
        MDBottomAppBar:

            MDTopAppBar:
                title: "MDBottomAppBar"
                icon: "git"
                type: "bottom"
                left_action_items: [["menu", lambda x: x]]
    '''


    class Example(MDApp):
        def build(self):
            self.theme_cls.material_style = "M2"
            self.theme_cls.theme_style = "Dark"
            self.theme_cls.primary_palette = "Orange"
            return Builder.load_string(KV)


    Example().run()

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/toolbar-8.png
    :align: center

Event on floating button
------------------------

Event ``on_action_button``:

.. code-block:: kv

    MDBottomAppBar:

        MDTopAppBar:
            title: "MDBottomAppBar"
            icon: "git"
            type: "bottom"
            left_action_items: [["menu", lambda x: x]]
            on_action_button: app.callback(self.icon)

Floating button position
------------------------

Mode:

- `'free-end'`
- `'free-center'`
- `'end'`
- `'center'`

.. code-block:: kv

    MDBottomAppBar:

        MDTopAppBar:
            title: "MDBottomAppBar"
            icon: "git"
            type: "bottom"
            left_action_items: [["menu", lambda x: x]]
            mode: "end"

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/toolbar-9.png
    :align: center

.. code-block:: kv

    MDBottomAppBar:

        MDTopAppBar:
            title: "MDBottomAppBar"
            icon: "git"
            type: "bottom"
            left_action_items: [["menu", lambda x: x]]
            mode: "free-end"

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/toolbar-10.png
    :align: center

Custom color
------------

.. code-block:: kv

    MDBottomAppBar:

        MDTopAppBar:
            title: "MDBottomAppBar"
            icon: "git"
            type: "bottom"
            left_action_items: [["menu", lambda x: x]]
            icon_color: 0, 1, 0, 1
            md_bg_bottom_color: "brown"

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/toolbar-11.png
    :align: center

M3 style bottom app bar
-----------------------

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/app-bar-bottom-m3.png
    :align: center

.. code-block:: python

    from kivy.lang import Builder

    from kivymd.app import MDApp

    KV = '''
    MDFloatLayout:
        md_bg_color: "#151511"

        MDBottomAppBar:
            md_bg_color: "#232217"
            icon_color: "#8A8D79"

            MDFabBottomAppBarButton:
                icon: "plus"
                md_bg_color: "#373A22"
    '''


    class Example(MDApp):
        def build(self):
            self.theme_cls.theme_style = "Dark"
            return Builder.load_string(KV)


    Example().run()

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/bottom-app-bar-m3-style-1.png
    :align: center

Add action items
----------------

.. code-block:: kv

    #:import MDActionBottomAppBarButton kivymd.uix.toolbar.MDActionBottomAppBarButton


    MDFloatLayout:

        MDBottomAppBar:
            action_items:
                [
                MDActionBottomAppBarButton(icon="gmail"),
                MDActionBottomAppBarButton(icon="label-outline"),
                MDActionBottomAppBarButton(icon="bookmark"),
                ]

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/bottom-app-bar-m3-style-2.png
    :align: center

Change action items
-------------------

.. code-block:: python

    from kivy.lang import Builder

    from kivymd.app import MDApp

    KV = '''
    #:import MDActionBottomAppBarButton kivymd.uix.toolbar.MDActionBottomAppBarButton


    MDFloatLayout:
        md_bg_color: "#151511"

        MDBottomAppBar:
            id: bottom_appbar
            md_bg_color: "#232217"
            icon_color: "#8A8D79"
            action_items:
                [
                MDActionBottomAppBarButton(icon="gmail"),
                MDActionBottomAppBarButton(icon="bookmark"),
                ]

            MDFabBottomAppBarButton:
                icon: "plus"
                md_bg_color: "#373A22"
                on_release: app.change_actions_items()
    '''


    class Example(MDApp):
        def change_actions_items(self):
            self.root.ids.bottom_appbar.action_items = [
                MDActionBottomAppBarButton(icon="magnify"),
                MDActionBottomAppBarButton(icon="trash-can-outline"),
                MDActionBottomAppBarButton(icon="download-box-outline"),
            ]

        def build(self):
            self.theme_cls.theme_style = "Dark"
            return Builder.load_string(KV)


    Example().run()

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/bottom-app-bar-m3-style-3.gif
    :align: center

A practical example
-------------------

.. code-block:: python

    from kivy.clock import Clock
    from kivy.lang import Builder
    from kivy.properties import StringProperty, BooleanProperty, ObjectProperty
    from kivy.uix.behaviors import FocusBehavior
    from kivy.uix.recycleboxlayout import RecycleBoxLayout
    from kivy.uix.recycleview.layout import LayoutSelectionBehavior
    from kivy.uix.recycleview.views import RecycleDataViewBehavior

    from kivymd.uix.boxlayout import MDBoxLayout
    from kivymd.uix.toolbar import MDActionBottomAppBarButton
    from kivymd.app import MDApp
    from kivymd.utils import asynckivy

    from faker import Faker  # pip install Faker

    KV = '''
    #:import MDFabBottomAppBarButton kivymd.uix.toolbar.MDFabBottomAppBarButton


    <UserCard>
        orientation: "vertical"
        adaptive_height: True
        md_bg_color: "#373A22" if self.selected else "#1F1E15"
        radius: 16
        padding: 0, 0, 0, "16dp"

        TwoLineAvatarListItem:
            divider: None
            _no_ripple_effect: True
            text: root.name
            secondary_text: root.time
            theme_text_color: "Custom"
            text_color: "#8A8D79"
            secondary_theme_text_color: self.theme_text_color
            secondary_text_color: self.text_color

            ImageLeftWidget:
                source: root.avatar
                radius: self.height / 2

        MDLabel:
            text: root.text
            adaptive_height: True
            theme_text_color: "Custom"
            text_color: "#8A8D79"
            padding_x: "16dp"
            shorten: True
            shorten_from: "right"

        Widget:


    MDFloatLayout:
        md_bg_color: "#151511"

        RecycleView:
            id: card_list
            viewclass: "UserCard"

            SelectableRecycleGridLayout:
                orientation: 'vertical'
                spacing: "16dp"
                padding: "16dp"
                default_size: None, dp(120)
                default_size_hint: 1, None
                size_hint_y: None
                height: self.minimum_height
                multiselect: True
                touch_multiselect: True

        MDBottomAppBar:
            id: bottom_appbar
            scroll_cls: card_list
            allow_hidden: True
            md_bg_color: "#232217"
            icon_color: "#8A8D79"

            MDFabBottomAppBarButton:
                id: fab_button
                icon: "plus"
                md_bg_color: "#373A22"
    '''


    class UserCard(RecycleDataViewBehavior, MDBoxLayout):
        name = StringProperty()
        time = StringProperty()
        text = StringProperty()
        avatar = StringProperty()
        callback = ObjectProperty(lambda x: x)

        index = None
        selected = BooleanProperty(False)
        selectable = BooleanProperty(True)

        def refresh_view_attrs(self, rv, index, data):
            self.index = index
            return super().refresh_view_attrs(rv, index, data)

        def on_touch_down(self, touch):
            if super().on_touch_down(touch):
                return True
            if self.collide_point(*touch.pos) and self.selectable:
                Clock.schedule_once(self.callback)
                return self.parent.select_with_touch(self.index, touch)

        def apply_selection(self, rv, index, is_selected):
            self.selected = is_selected
            rv.data[index]["selected"] = is_selected


    class SelectableRecycleGridLayout(
        FocusBehavior, LayoutSelectionBehavior, RecycleBoxLayout
    ):
        pass


    class Test(MDApp):
        selected_cards = False

        def build(self):
            return Builder.load_string(KV)

        def on_tap_card(self, *args):
            datas = [data["selected"] for data in self.root.ids.card_list.data]
            if True in datas and not self.selected_cards:
                self.root.ids.bottom_appbar.action_items = [
                    MDActionBottomAppBarButton(icon="gmail"),
                    MDActionBottomAppBarButton(icon="label-outline"),
                    MDActionBottomAppBarButton(icon="bookmark"),
                ]
                self.root.ids.fab_button.icon = "pencil"
                self.selected_cards = True
            else:
                if len(list(set(datas))) == 1 and not list(set(datas))[0]:
                    self.selected_cards = False
                if not self.selected_cards:
                    self.root.ids.bottom_appbar.action_items = [
                        MDActionBottomAppBarButton(icon="magnify"),
                        MDActionBottomAppBarButton(icon="trash-can-outline"),
                        MDActionBottomAppBarButton(icon="download-box-outline"),
                    ]
                    self.root.ids.fab_button.icon = "plus"

        def on_start(self):
            async def generate_card():
                for i in range(10):
                    await asynckivy.sleep(0)
                    self.root.ids.card_list.data.append(
                        {
                            "name": fake.name(),
                            "time": fake.date(),
                            "avatar": fake.image_url(),
                            "text": fake.text(),
                            "selected": False,
                            "callback": self.on_tap_card,
                        }
                    )

            self.on_tap_card()
            fake = Faker()
            Clock.schedule_once(lambda x: asynckivy.start(generate_card()))


    Test().run()

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/bottom-app-bar-m3-style-4.gif
    :align: center

Tooltips
--------

You can add MDTooltips to the icons by adding a text string to the bar item,
as shown below:

.. code-block:: python

    from kivy.lang import Builder

    from kivymd.app import MDApp
    from kivymd.uix.snackbar import Snackbar

    KV = '''
    MDBoxLayout:
        orientation: "vertical"

        MDTopAppBar:
            title: "MDTopAppBar"
            left_action_items: [["menu", "This is the navigation"]]
            right_action_items:
                [
                [
                "dots-vertical",
                lambda x: app.callback(x),
                "this is the More Actions"
                ]
                ]

        MDLabel:
            text: "Content"
            halign: "center"
    '''


    class Example(MDApp):
        def build(self):
            self.theme_cls.material_style = "M2"
            self.theme_cls.theme_style = "Dark"
            self.theme_cls.primary_palette = "Orange"
            return Builder.load_string(KV)

        def callback(self, button):
            Snackbar(text="Hello World").open()


    Example().run()

M3 style top app bar
--------------------

.. code-block:: python

    from kivy.lang import Builder

    from kivymd.app import MDApp
    from kivymd.uix.toolbar import MDTopAppBar

    KV = '''
    MDScreen:

        MDBoxLayout:
            id: box
            orientation: "vertical"
            spacing: "12dp"
            pos_hint: {"top": 1}
            adaptive_height: True
    '''


    class Example(MDApp):
        def build(self):
            self.theme_cls.theme_style = "Dark"
            self.theme_cls.primary_palette = "Orange"
            return Builder.load_string(KV)

        def on_start(self):
            for type_height in ["medium", "large", "small"]:
                self.root.ids.box.add_widget(
                    MDTopAppBar(
                        type_height=type_height,
                        headline_text=f"Headline {type_height.lower()}",
                        md_bg_color="brown",
                        left_action_items=[["arrow-left", lambda x: x]],
                        right_action_items=[
                            ["attachment", lambda x: x],
                            ["calendar", lambda x: x],
                            ["dots-vertical", lambda x: x],
                        ],
                        title="Title" if type_height == "small" else "",
                        anchor_title="left",
                    )
                )


    Example().run()

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/toolbar-m3.png
    :align: center
"""
__all__ = ("MDTopAppBar", "MDBottomAppBar", "MDActionBottomAppBarButton", "MDFabBottomAppBarButton", "MDActionOverFlowButton")
class MDFabBottomAppBarButton(MDFloatingActionButton, RotateBehavior, ScaleBehavior, MDTooltip):
    """
    Implements a floating action button (FAB) for a bar with type 'bottom'.

    For more information, see in the
    :class:`~kivymd.uix.button.MDFloatingActionButton` and
    :class:`~kivymd.uix.behaviors.RotateBehavior` and
    :class:`~kivymd.uix.behaviors.ScaleBehavior` and
    :class:`~kivymd.uix.tooltip.MDTooltip`
    classes documentation.
    """
    def set__radius(self, *args) -> None:
        ...
    


class ActionTopAppBarButton(MDIconButton, MDTooltip):
    """
    Implements action buttons on the bar.

    For more information, see in the
    :class:`~kivymd.uix.button.MDIconButton` and
    :class:`~kivymd.uix.tooltip.MDTooltip`
    classes documentation.
    """
    overflow_text = ...


class MDActionBottomAppBarButton(ActionTopAppBarButton):
    """
    Implements action buttons for a :class:'MDBottomAppBar' class.

    .. versionadded:: 1.2.0

    For more information, see in the
    :class:`~kivymd.uix.button.MDIconButton` and
    :class:`~kivymd.uix.tooltip.MDTooltip`
    classes documentation.
    """
    ...


class MDActionOverFlowButton(ActionTopAppBarButton):
    """
    Implements a bar action button for the `OverFlowMenu` menu.

    For more information, see in the
    :class:`~kivymd.uix.button.MDIconButton` and
    :class:`~kivymd.uix.tooltip.MDTooltip`
    classes documentation.
    """
    icon = ...


class OverFlowMenu(MDDropdownMenu):
    """
    Implements a menu for the items (:class:`~OverFlowMenuItem`) of the
    corresponding action buttons.
    """
    ...


class OverFlowMenuItem(OneLineIconListItem):
    """Implements a menu (:class:`~OverFlowMenu`) item."""
    icon = ...


class NotchedBox(ThemableBehavior, CommonElevationBehavior, SpecificBackgroundColorBehavior, BoxLayout):
    elevation = ...
    notch_radius = ...
    notch_center_x = ...
    _indices_right = ...
    _vertices_right = ...
    _indices_left = ...
    _vertices_left = ...
    _rounded_rectangle_height = ...
    _total_angle = ...
    _rectangle_left_pos = ...
    _rectangle_left_width = ...
    _rectangle_right_pos = ...
    _rectangle_right_width = ...
    _rounding_percentage = ...
    _shift = ...
    def __init__(self, **kw) -> None:
        ...
    


class MDTopAppBar(DeclarativeBehavior, NotchedBox, WindowController):
    """
    Top app bar class.

    For more information, see in the
    :class:`~kivymd.uix.behaviors.DeclarativeBehavior` and
    :class:`~NotchedBox` and
    :class:`~kivymd.uix.controllers.WindowController`
    classes documentation.

    :Events:
        `on_action_button`
            Method for the button used for the :class:`~MDBottomAppBar` class.
    """
    left_action_items = ...
    right_action_items = ...
    title = ...
    mode = ...
    type = ...
    opposite_colors = ...
    md_bg_bottom_color = ...
    set_bars_color = ...
    use_overflow = ...
    overflow_cls = ...
    icon = ...
    icon_color = ...
    anchor_title = ...
    headline_text = ...
    headline_text_color = ...
    type_height = ...
    _hidden_items = ...
    _overflow_menu_items = ...
    def __init__(self, **kwargs) -> None:
        ...
    
    def set_headline_font_style(self, interval: Union[int, float]) -> None:
        ...
    
    def on_width(self, instance_toolbar, width: float) -> None:
        """
        Called when the bar is resized (size of the application window).
        """
        ...
    
    def return_action_button_to_toolbar(self) -> None:
        ...
    
    def remove_overflow_button(self) -> None:
        """Removes an overflow button to the bar."""
        ...
    
    def add_overflow_button(self) -> None:
        """Adds an overflow button to the bar."""
        ...
    
    def overflow_action_button_is_added(self) -> bool:
        """
        Returns `True` if at least one action button
        (:class:`~ActionTopAppBarButton') on the bar is added to the
        overflow.
        """
        ...
    
    def add_action_button_to_overflow(self): # -> None:
        """Adds an overflow button to the bar."""
        ...
    
    def check_overflow_cls(self, interval: Union[int, float]) -> None:
        """
        If the user does not set the :attr:`overflow_cls` attribute but uses
        overflows, the :attr:`overflow_cls` attribute will use the default
        value.
        """
        ...
    
    def on_type(self, instance_toolbar, type_value: str) -> None:
        """Called when the value of the  :attr:`type` attribute changes."""
        ...
    
    def on_type_height(self, instance_toolbar, height_type_value: str) -> None:
        """
        Called when the value of the  :attr:`type_height` attribute changes.
        """
        ...
    
    def on_action_button(self, *args): # -> None:
        """
        Method for the button used for the :class:`~MDBottomAppBar` class.
        """
        ...
    
    def on_overflow_cls(self, instance_toolbar, instance_overflow_cls: MDDropdownMenu) -> None:
        """
        Called when the value of the  :attr:`overflow_cls` attribute changes.
        """
        ...
    
    def on_md_bg_color(self, instance_toolbar, color_value: list) -> None:
        """
        Called when the value of the  :attr:`md_bg_color` attribute changes.
        """
        ...
    
    def on_left_action_items(self, instance_toolbar, items_value: list) -> None:
        """
        Called when the value of the  :attr:`left_action_items` attribute
        changes.
        """
        ...
    
    def on_right_action_items(self, instance_toolbar, items_value: list) -> None:
        """
        Called when the value of the  :attr:`right_action_items` attribute
        changes.
        """
        ...
    
    def on_icon(self, instance_toolbar, icon_name: str) -> None:
        """Called when the value of the  :attr:`icon` attribute changes."""
        ...
    
    def on_icon_color(self, instance, icon_name: str) -> None:
        """
        Called when the value of the  :attr:`icon_color` attribute changes.
        """
        ...
    
    def on_md_bg_bottom_color(self, instance_toolbar, color_value: list) -> None:
        """
        Called when the value of the  :attr:`md_bg_bottom_color` attribute
        changes.
        """
        ...
    
    def on_anchor_title(self, instance_toolbar, anchor_value: str) -> None:
        """
        Called when the value of the  :attr:`anchor_title` attribute changes.
        """
        ...
    
    def on_mode(self, instance_toolbar, mode_value: str) -> None:
        """Called when the value of the  :attr:`made` attribute changes."""
        ...
    
    def set_md_bg_color(self, instance_toolbar, color_value: list) -> None:
        ...
    
    def set_notch(self) -> None:
        ...
    
    def set_shadow(self, *args) -> None:
        ...
    
    def get_default_overflow_cls(self) -> OverFlowMenu:
        ...
    
    def update_overflow_menu_items(self, action_button) -> None:
        ...
    
    def update_bar_height(self, instance_theme_manager, material_style_value: str) -> None:
        ...
    
    def update_floating_radius(self, interval: Union[int, float]) -> None:
        ...
    
    def update_anchor_title(self, material_style_value: str) -> str:
        ...
    
    def update_action_bar(self, instance_box_layout, action_bar_items: list) -> None:
        ...
    
    def update_md_bg_color(self, *args) -> None:
        ...
    
    def update_action_bar_text_colors(self, *args) -> None:
        ...
    
    def remove_notch(self) -> None:
        ...
    
    def remove_shadow(self) -> None:
        ...
    


class MDBottomAppBar(DeclarativeBehavior, ThemableBehavior, SpecificBackgroundColorBehavior, CommonElevationBehavior, FloatLayout):
    """
    Bottom app bar class.

    For more information, see in the
    :class:`~kivymd.uix.behaviors.DeclarativeBehavior` and
    :class:`~kivymd.theming.ThemableBehavior` and
    :class:`~kivymd.uix.behaviors.SpecificBackgroundColorBehavior` and
    :class:`~kivymd.uix.behaviors.CommonElevationBehavior` and
    :class:`~kivy.uix.floatlayout.FloatLayout`
    classes documentation.

    :Events:
        `on_show_bar`
            The method is called when the :class:`~MDBottomAppBar` panel
            is shown.
        `on_hide_bar`
            The method is called when the :class:`~MDBottomAppBar` panel
            is hidden.
    """
    md_bg_color = ...
    icon_color = ...
    action_items = ...
    animation = ...
    show_transition = ...
    hide_transition = ...
    hide_duration = ...
    show_duration = ...
    scroll_cls = ...
    allow_hidden = ...
    bar_is_hidden = ...
    _padding = ...
    _x = ...
    _scroll_cls_y = ...
    _cache = ...
    _current_data = ...
    _wait_removed = ...
    _animated_hidden = ...
    _animated_show = ...
    _fab_bottom_app_bar_button = ...
    _action_overflow_button = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def button_centering_animation(self, button: MDActionOverFlowButton | MDActionBottomAppBarButton | MDFabBottomAppBarButton) -> None:
        """
        Animation of centering buttons for
        :class:`~MDActionOverFlowButton`,
        :class:`~MDActionBottomAppBarButton` and
        :class:`~MDFabBottomAppBarButton` classes.
        """
        ...
    
    def check_scroll_direction(self, scroll_cls, y: float) -> None:
        """
        Checks the scrolling direction.
        Depending on the scrolling direction, hides or shows the
        :class:`~MDBottomAppBar` panel.
        """
        ...
    
    def show_bar(self) -> None:
        """Show :class:`~MDBottomAppBar` panel."""
        ...
    
    def hide_bar(self) -> None:
        """Hide :class:`~MDBottomAppBar` panel."""
        ...
    
    def on_show_bar(self, *args) -> None:
        """
        The method is called when the :class:`~MDBottomAppBar` panel
        is shown.
        """
        ...
    
    def on_hide_bar(self, *args) -> None:
        """
        The method is called when the :class:`~MDBottomAppBar` panel
        is hidden.
        """
        ...
    
    def on_scroll_cls(self, instance, scroll_cls) -> None:
        """
        Called when the value of the :attr:`scroll_cls` attribute changes.
        """
        ...
    
    def on_size(self, *args) -> None:
        """Called when the root screen is resized."""
        ...
    
    def on_action_items(self, instance, value: list) -> None:
        """
        Called when the value of the :attr:`action_items` attribute changes.
        """
        ...
    
    def set_fab_opacity(self, *ars) -> None:
        """
        Sets the transparency value of the:class:`~MDFabBottomAppBarButton`
        button.
        """
        ...
    
    def set_fab_icon(self, instance, value) -> None:
        """
        Animates the size of the :class:`~MDFabBottomAppBarButton` button.
        """
        ...
    
    def set_bg_color(self, *args) -> None:
        """
        Sets the background color for the :class:`~MDBottomAppBar` class.
        """
        ...
    
    def set_icon_color(self, widget: MDActionOverFlowButton | MDActionBottomAppBarButton) -> None:
        """
        Sets the icon color for the :class:`~MDActionOverFlowButton` and
        :class:`~MDActionBottomAppBarButton` classes.
        """
        ...
    
    def add_widget(self, widget, index=..., canvas=...): # -> None:
        ...
    


