"""
This type stub file was generated by pyright.
"""

from typing import Union

from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivymd.app import MDApp
from kivymd.theming import ThemableBehavior
from kivymd.uix.behaviors import DeclarativeBehavior

"""
Components/TextField
====================

.. seealso::

    `Material Design spec, Text fields <https://material.io/components/text-fields>`_

.. rubric:: Text fields let users enter and edit text.

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/text-fields.png
    :align: center

`KivyMD` provides the following field classes for use:

- MDTextField_
- MDTextFieldRect_

.. Note:: :class:`~MDTextField` inherited from
    :class:`~kivy.uix.textinput.TextInput`. Therefore, most parameters and all
    events of the :class:`~kivy.uix.textinput.TextInput` class are also
    available in the :class:`~MDTextField` class.

.. MDTextField:
MDTextField
-----------

:class:`~MDTextField` can be with helper text and without.

Without helper text mode
------------------------

.. code-block:: kv

    MDTextField:
        hint_text: "No helper text"

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/text-field-no-helper-mode.gif
    :align: center

Helper text mode on ``on_focus`` event
--------------------------------------

.. code-block:: kv

    MDTextField:
        hint_text: "Helper text on focus"
        helper_text: "This will disappear when you click off"
        helper_text_mode: "on_focus"

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/text-field-helper-mode-on-focus.gif
    :align: center

Persistent helper text mode
---------------------------

.. code-block:: kv

    MDTextField:
        hint_text: "Persistent helper text"
        helper_text: "Text is always here"
        helper_text_mode: "persistent"

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/text-field-helper-mode-persistent.gif
    :align: center

Helper text mode `'on_error'`
-----------------------------

To display an error in a text field when using the
``helper_text_mode: "on_error"`` parameter, set the `"error"` text field
parameter to `True`:

.. code-block:: python

    from kivy.lang import Builder

    from kivymd.app import MDApp

    KV = '''
    MDScreen:

        MDTextField:
            id: text_field_error
            hint_text: "Helper text on error (press 'Enter')"
            helper_text: "There will always be a mistake"
            helper_text_mode: "on_error"
            pos_hint: {"center_x": .5, "center_y": .5}
            size_hint_x: .5
    '''


    class Test(MDApp):
        def __init__(self, **kwargs):
            super().__init__(**kwargs)
            self.screen = Builder.load_string(KV)

        def build(self):
            self.theme_cls.theme_style = "Dark"
            self.theme_cls.primary_palette = "Orange"
            self.screen.ids.text_field_error.bind(
                on_text_validate=self.set_error_message,
                on_focus=self.set_error_message,
            )
            return self.screen

        def set_error_message(self, instance_textfield):
            self.screen.ids.text_field_error.error = True


    Test().run()

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/text-field-helper-mode-on-error.gif
    :align: center

Helper text mode `'on_error'` (with required)
---------------------------------------------

.. code-block:: kv

    MDTextField:
        hint_text: "required = True"
        text: "required = True"
        required: True
        helper_text_mode: "on_error"
        helper_text: "Enter text"

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/text-field-required.gif
    :align: center

Text length control
-------------------

.. code-block:: kv

    MDTextField:
        hint_text: "Max text length = 5"
        max_text_length: 5

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/text-field-text-length.gif
    :align: center


Multi line text
---------------

.. code-block:: kv

    MDTextField:
        multiline: True
        hint_text: "Multi-line text"

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/text-field-text-multi-line.gif
    :align: center

Rectangle mode
--------------

.. code-block:: kv

    MDTextField:
        hint_text: "Rectangle mode"
        mode: "rectangle"

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/text-field-rectangle-mode.gif
    :align: center

Fill mode
---------

.. code-block:: kv

    MDTextField:
        hint_text: "Fill mode"
        mode: "fill"

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/text-field-fill-mode.gif
    :align: center

Round mode
---------

.. code-block:: kv

    MDTextField:
        hint_text: "Round mode"
        mode: "round"
        max_text_length: 15
        helper_text: "Massage"

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/text-field-round-mode.gif
    :align: center

.. MDTextFieldRect:
MDTextFieldRect
---------------

.. Note:: :class:`~MDTextFieldRect` inherited from
    :class:`~kivy.uix.textinput.TextInput`. You can use all parameters and
    attributes of the :class:`~kivy.uix.textinput.TextInput` class in the
    :class:`~MDTextFieldRect` class.

.. code-block:: kv

    MDTextFieldRect:
        size_hint: 1, None
        height: "30dp"
        background_color: app.theme_cls.bg_normal

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/text-field-rect.gif
    :align: center

.. Warning:: While there is no way to change the color of the border.

Clickable icon for MDTextField
------------------------------

.. code-block:: python

    from kivy.lang import Builder
    from kivy.properties import StringProperty

    from kivymd.app import MDApp
    from kivymd.uix.relativelayout import MDRelativeLayout

    KV = '''
    <ClickableTextFieldRound>:
        size_hint_y: None
        height: text_field.height

        MDTextField:
            id: text_field
            hint_text: root.hint_text
            text: root.text
            password: True
            icon_left: "key-variant"

        MDIconButton:
            icon: "eye-off"
            pos_hint: {"center_y": .5}
            pos: text_field.width - self.width + dp(8), 0
            theme_text_color: "Hint"
            on_release:
                self.icon = "eye" if self.icon == "eye-off" else "eye-off"
                text_field.password = False if text_field.password is True else True


    MDScreen:

        ClickableTextFieldRound:
            size_hint_x: None
            width: "300dp"
            hint_text: "Password"
            pos_hint: {"center_x": .5, "center_y": .5}
    '''


    class ClickableTextFieldRound(MDRelativeLayout):
        text = StringProperty()
        hint_text = StringProperty()
        # Here specify the required parameters for MDTextFieldRound:
        # [...]


    class Test(MDApp):
        def build(self):
            return Builder.load_string(KV)


    Test().run()

.. image:: https://github.com/HeaTTheatR/KivyMD-data/raw/master/gallery/kivymddoc/text-field-clickable_right-icon.gif
    :align: center

.. seealso::

    See more information in the :class:`~MDTextFieldRect` class.
"""
__all__ = ("MDTextField", "MDTextFieldRect")

class AutoFormatTelephoneNumber:
    """
    Implements automatic formatting of the text entered in the text field
    according to the mask, for example '+38 (###) ### ## ##'.
    """

    def __init__(self) -> None: ...
    def isnumeric(self, value): ...
    def do_backspace(self, *args): ...
    def field_filter(self, value, boolean): ...
    def format(self, value): ...

class Validator:
    """Container class for various validation methods."""

    datetime_date = ...
    date_interval = ...
    date_format = ...
    def is_email_valid(self, text: str) -> bool: ...
    def is_time_valid(self, text: str) -> bool: ...
    def is_date_valid(self, text: str) -> bool: ...
    def on_date_interval(self, *args) -> None:
        """Default event handler for date_interval input."""
        ...

class MDTextFieldRect(ThemableBehavior, TextInput):
    """
    Textfield rect class.

    For more information, see in the
    :class:`~kivymd.theming.ThemableBehavior` and
    :class:`~kivy.uix.textinput.TextInput`
    classes documentation.
    """

    line_anim = ...
    def get_rect_instruction(self): ...

    _rectangle = ...
    def get_color_instruction(self): ...

    _rectangle_color = ...
    _primary_color = ...
    def __init__(self, **kwargs) -> None: ...
    def anim_rect(self, points, alpha): ...

class TextfieldLabel(ThemableBehavior, Label):
    """Base texture for :class:`~MDTextField` class."""

    font_style = ...
    field = ...
    def __init__(self, **kwargs) -> None: ...

class MDTextField(
    DeclarativeBehavior,
    ThemableBehavior,
    TextInput,
    Validator,
    AutoFormatTelephoneNumber,
):
    """
    Textfield class.

    For more information, see in the
    :class:`~kivymd.uix.behaviors.DeclarativeBehavior` and
    :class:`~kivymd.theming.ThemableBehavior` and
    :class:`~kivy.uix.textinput.TextInput` and
    :class:`~Validator` and
    :class:`~AutoFormatTelephoneNumber`
    classes documentation.
    """

    text: str = ...
    helper_text = ...
    helper_text_mode = ...
    max_text_length = ...
    required = ...
    mode = ...
    phone_mask = ...
    validator = ...
    line_color_normal = ...
    line_color_focus = ...
    line_anim = ...
    error_color = ...
    fill_color_normal = ...
    fill_color_focus = ...
    active_line = ...
    error = ...
    hint_text_color_normal = ...
    hint_text_color_focus = ...
    helper_text_color_normal = ...
    helper_text_color_focus = ...
    icon_right_color_normal = ...
    icon_right_color_focus = ...
    icon_left_color_normal = ...
    icon_left_color_focus = ...
    max_length_text_color = ...
    icon_right = ...
    icon_left = ...
    text_color_normal = ...
    text_color_focus = ...
    font_size = ...
    max_height = ...
    radius = ...
    font_name_helper_text = ...
    font_name_hint_text = ...
    font_name_max_length = ...
    _hint_x = ...
    _hint_y = ...
    _underline_width = ...
    _hint_text_font_size = ...
    _helper_text_label = ...
    _max_length_label = ...
    _hint_text_label = ...
    _icon_right_label = ...
    _icon_left_label = ...
    _line_blank_space_right_point = ...
    _line_blank_space_left_point = ...
    _fill_color = ...
    _text_color_normal = ...
    _hint_text_color = ...
    _helper_text_color = ...
    _max_length_text_color = ...
    _icon_right_color = ...
    _icon_left_color = ...
    _line_color_normal = ...
    _line_color_focus = ...
    __hint_text = ...
    _colors_to_updated = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def cancel_all_animations_on_double_click(self) -> None:
        """
        Cancels the animations of the text field when double-clicking on the
        text field.
        """
        ...
    def set_colors_to_updated(self, interval: Union[float, int]) -> None: ...
    def set_default_colors(
        self, interval: Union[float, int], updated: bool = ...
    ) -> None:
        """
        Sets the default text field colors when initializing a text field
        object. Also called when the application palette changes.

        :param updated: If `True` - the color theme of the application has
                        been changed. Updating the meanings of the colors.
        """
        ...
    def set_notch_rectangle(self, joining: bool = ...) -> None:
        """
        Animates a notch for the hint text in the rectangle of the text field
        of type `rectangle`.
        """
        ...
    def set_active_underline_width(self, width: Union[float, int]) -> None:
        """Animates the width of the active underline line."""
        ...
    def set_static_underline_color(self, color: list) -> None:
        """Animates the color of a static underline line."""
        ...
    def set_active_underline_color(self, color: list) -> None:
        """Animates the fill color for 'fill' mode."""
        ...
    def set_fill_color(self, color: list) -> None:
        """Animates the color of the hint text."""
        ...
    def set_helper_text_color(self, color: list) -> None:
        """Animates the color of the hint text."""
        ...
    def set_max_length_text_color(self, color: list) -> None:
        """Animates the color of the max length text."""
        ...
    def set_icon_right_color(self, color: list) -> None:
        """Animates the color of the icon right."""
        ...
    def set_icon_left_color(self, color: list) -> None:
        """Animates the color of the icon left."""
        ...
    def set_hint_text_color(self, focus: bool, error: bool = ...) -> None:
        """Animates the color of the hint text."""
        ...
    def set_pos_hint_text(self, y: float, x: float = ...) -> None:
        """Animates the x-axis width and y-axis height of the hint text."""
        ...
    def set_hint_text_font_size(self, font_size: float) -> None:
        """Animates the font size of the hint text."""
        ...
    def set_max_text_length(self) -> None:
        """Called when text is entered into a text field."""
        ...
    def check_text(self, interval: Union[float, int]) -> None: ...
    def set_text(self, instance_text_field, text: str) -> None:
        """Called when text is entered into a text field."""
        ...
    def set_x_pos(self): ...
    def set_objects_labels(self) -> None:
        """
        Creates labels objects for the parameters`helper_text`,`hint_text`,
        etc.
        """
        ...
    def on_helper_text(self, instance_text_field, helper_text: str) -> None: ...
    def on_focus(self, instance_text_field, focus: bool) -> None: ...
    def on_icon_left(self, instance_text_field, icon_name: str) -> None: ...
    def on_icon_right(self, instance_text_field, icon_name: str) -> None: ...
    def on_disabled(self, instance_text_field, disabled_value: bool) -> None: ...
    def on_error(self, instance_text_field, error: bool) -> None:
        """
        Changes the primary colors of the text box to match the `error` value
        (text field is in an error state or not).
        """
        ...
    def on_hint_text(self, instance_text_field, hint_text: str) -> None: ...
    def on_width(self, instance_text_field, width: float) -> None:
        """Called when the application window is resized."""
        ...
    def on_height(self, instance_text_field, value_height: float) -> None: ...
    def on_text_color_normal(
        self, instance_text_field, color: Union[list, str]
    ) -> None: ...
    def on_hint_text_color_normal(
        self, instance_text_field, color: Union[list, str]
    ) -> None: ...
    def on_helper_text_color_normal(
        self, instance_text_field, color: Union[list, str]
    ) -> None: ...
    def on_icon_right_color_normal(
        self, instance_text_field, color: Union[list, str]
    ) -> None: ...
    def on_line_color_normal(
        self, instance_text_field, color: Union[list, str]
    ) -> None: ...
    def on_max_length_text_color(
        self, instance_text_field, color: Union[list, str]
    ) -> None: ...

if __name__ == "__main__":
    KV = ...

    class Test(MDApp):
        def build(self): ...
        def set_text(self): ...
